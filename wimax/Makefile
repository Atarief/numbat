#
#  Makefile for wimax
#
#  ** This file was automatically generated by the command:
#  opp_makemake -f
#

# Name of target to be created (-o option)
TARGET = wimax

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH=

# misc additional object and library files to link
EXTRA_OBJS=

# object files from other directories to link with (wildcard needed to prevent "no such file *.o" errors)
EXT_DIR_OBJS=

# time stamps of other directories (used as dependency)
EXT_DIR_TSTAMPS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------

# Generic definitions. To avoid redundancies across Makefiles, you can
# import them from a common file -- see opp_makemake -c flag.
NEDC=/usr/local/omnetpp/bin/nedtool
MSGC=opp_msgc
CXX=g++
CC=gcc
AR=ar cr
SHLIB_LD=g++ -shared 
MAKEDEPEND=opp_makedep -Y --objdirtree

CFLAGS=-O2 -DNDEBUG=1   -DWITH_PARSIM -DWITH_NETBUILDER
NEDCFLAGS=-Wno-unused
LDFLAGS= -Wl,--export-dynamic
EXE_SUFFIX=

WITH_PARSIM=yes
WITH_NETBUILDER=yes

OMNETPP_INCL_DIR=/usr/local/omnetpp/include
OMNETPP_LIB_DIR=/usr/local/omnetpp/lib

TK_LIBS= -ltk8.4 -ltcl8.4
MPI_LIBS=
XML_LIBS=-lxml2
SYS_LIBS=-ldl -lstdc++ 
SYS_LIBS_PURE=-ldl -lsocket -lnsl -lm $(shell $(CXX) -print-file-name=libstdc++.a)

# User interface libs
CMDENV_LIBS=-lenvir -lcmdenv
TKENV_LIBS=-lenvir -ltkenv $(TK_LIBS)

# Simulation kernel
KERNEL_LIBS=-lsim_std

ifeq ($(WITH_NETBUILDER),yes)
KERNEL_LIBS += -lnedxml $(XML_LIBS)
endif

ifeq ($(WITH_PARSIM),yes)
KERNEL_LIBS += $(MPI_LIBS)
endif

# Simulation kernel and user interface libraries
OMNETPP_LIBS=-L$(OMNETPP_LIB_DIR) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
NEDCOPTS=$(COPTS) $(NEDCFLAGS)
MSGCOPTS= $(INCLUDE_PATH)

#------------------------------------------------------------------------------

# subdirectories to recurse into
SUBDIRS= 

# object files in this directory
OBJS= BS_n.o common_n.o IPv6_n.o physim_n.o SS_n.o wmaxmsg_m.o AirDummy.o fsm.o ipv6node.o logger.o ssinfo.o wmaxctrl.o wmaxmac.o wmaxmaccs.o wmaxphy.o wmaxradio.o

# header files generated (from msg files)
GENERATEDHEADERS= wmaxmsg_m.h

#------------------------------------------------------------------------------

$(TARGET): $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	$(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) $(OMNETPP_LIBS) -o $(TARGET)
	echo>.tstamp

$(OBJS) : $(GENERATEDHEADERS)


purify: $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

BS_n.o: BS_n.cc
	$(CXX) -c $(NEDCOPTS) BS_n.cc

BS_n.cc: BS.ned
	$(NEDC) $(INCLUDE_PATH) BS.ned

common_n.o: common_n.cc
	$(CXX) -c $(NEDCOPTS) common_n.cc

common_n.cc: common.ned
	$(NEDC) $(INCLUDE_PATH) common.ned

IPv6_n.o: IPv6_n.cc
	$(CXX) -c $(NEDCOPTS) IPv6_n.cc

IPv6_n.cc: IPv6.ned
	$(NEDC) $(INCLUDE_PATH) IPv6.ned

physim_n.o: physim_n.cc
	$(CXX) -c $(NEDCOPTS) physim_n.cc

physim_n.cc: physim.ned
	$(NEDC) $(INCLUDE_PATH) physim.ned

SS_n.o: SS_n.cc
	$(CXX) -c $(NEDCOPTS) SS_n.cc

SS_n.cc: SS.ned
	$(NEDC) $(INCLUDE_PATH) SS.ned

wmaxmsg_m.o: wmaxmsg_m.cc
	$(CXX) -c $(NEDCOPTS) wmaxmsg_m.cc

wmaxmsg_m.cc wmaxmsg_m.h: wmaxmsg.msg
	$(MSGC) $(MSGCOPTS) wmaxmsg.msg

AirDummy.o: AirDummy.cc
	$(CXX) -c $(COPTS) AirDummy.cc

fsm.o: fsm.cc
	$(CXX) -c $(COPTS) fsm.cc

ipv6node.o: ipv6node.cc
	$(CXX) -c $(COPTS) ipv6node.cc

logger.o: logger.cc
	$(CXX) -c $(COPTS) logger.cc

ssinfo.o: ssinfo.cc
	$(CXX) -c $(COPTS) ssinfo.cc

wmaxctrl.o: wmaxctrl.cc
	$(CXX) -c $(COPTS) wmaxctrl.cc

wmaxmac.o: wmaxmac.cc
	$(CXX) -c $(COPTS) wmaxmac.cc

wmaxmaccs.o: wmaxmaccs.cc
	$(CXX) -c $(COPTS) wmaxmaccs.cc

wmaxphy.o: wmaxphy.cc
	$(CXX) -c $(COPTS) wmaxphy.cc

wmaxradio.o: wmaxradio.cc
	$(CXX) -c $(COPTS) wmaxradio.cc


#doc: neddoc doxy

#neddoc:
#	opp_neddoc -a

#doxy: doxy.cfg
#	doxygen doxy.cfg

generateheaders: $(GENERATEDHEADERS)
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) generateheaders) || exit 1; done

clean:
	rm -f $(TARGET)$(EXE_SUFFIX)
	rm -f *.o *_n.cc *_n.h *_m.cc *_m.h .tstamp
	rm -f *.vec *.sca
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -- *.cc
	# $(MAKEDEPEND) $(INCLUDE_PATH) -fMakefile.in -- *.cc
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) depend) || exit 1; done

makefiles:
	# recreate Makefile
	opp_makemake -f  
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefiles) || exit 1; done

makefile-ins:
	# recreate Makefile.in
	opp_makemake -f -m  
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefile-ins) || exit 1; done

# "re-makemake" and "re-makemake-m" are deprecated, historic names of the above two targets
re-makemake: makefiles
re-makemake-m: makefile-ins


# DO NOT DELETE THIS LINE -- make depend depends on it.
AirDummy.o: AirDummy.cc \
  AirDummy.h \
  logger.h
fsm.o: fsm.cc \
  fsm.h \
  logger.h
ipv6node.o: ipv6node.cc \
  ipv6node.h
logger.o: logger.cc \
  logger.h
ssinfo.o: ssinfo.cc \
  logger.h \
  ssinfo.h
wmaxctrl.o: wmaxctrl.cc \
  wmaxctrl.h \
  logger.h \
  hoinfo.h \
  wmaxradio.h \
  wmaxmac.h \
  ssinfo.h \
  fsm.h
wmaxmac.o: wmaxmac.cc \
  wmaxmac.h \
  wmaxctrl.h \
  logger.h \
  fsm.h \
  hoinfo.h \
  ssinfo.h
wmaxmaccs.o: wmaxmaccs.cc \
  wmaxmaccs.h \
  ipv6node.h \
  wmaxmac.h \
  logger.h
wmaxphy.o: wmaxphy.cc \
  wmaxphy.h \
  logger.h
wmaxradio.o: wmaxradio.cc \
  wmaxradio.h \
  logger.h \
  fsm.h
